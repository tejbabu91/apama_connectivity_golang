connectivityPlugins:
  goTransport:
    directory: "${EXAMPLES_DIR}/FileTransport/Release"
    libraryName: GoFileTransport
    class: GoTransport
  goTransport2:
    directory: ${EXAMPLES_DIR}/sample/Release
    libraryName: GoTransport
    class: GoTransport
  goMapperCodec:
    directory: "${EXAMPLES_DIR}/FileTransport/Release"
    libraryName: GoFileTransport
    class: GoMapperCodec
  goMapperCodec2:
    directory: "${EXAMPLES_DIR}/sample/Release"
    libraryName: GoTransport
    class: GoMapperCodec
  diag:
    libraryName: DiagnosticCodec
    class: DiagnosticCodec
  jsonCodec:
    libraryName: connectivity-json-codec
    class: JSONCodec
  mapperCodec:
    libraryName: MapperCodec
    class: MapperCodec

startChains:
  goTransport:
    - apama.eventMap:
        # Capture events to this channel ...
        subscribeChannels:
          - goWriteLine
        # ... and send them back to this channel
        defaultChannel: goReadLine
        defaultEventType: "apamax.ReadLine"

    - diag: { tag: application1 }

    # # application specific mapping
    - mapperCodec:
        "*":
          towardsTransport:
            mapFrom:
              - payload: payload.line
          towardsHost:
            mapFrom:
              - payload.line: payload

    - diag: { tag: application2 }

    - goMapperCodec

    - diag: { tag: transport }

    # convert everything to json as encoding format
    - jsonCodec
    - goTransport:
        writeFile: "${PARENT_DIR}/write.txt"
        readFile: "${PARENT_DIR}/read.txt"
  
  goTransport2:
    # Use the Map host plugin, so the payload type will be a map<string,data>
    # with the keys being the name of the fields in the event
    - apama.eventMap:
        # Capture events to this channel ...
        subscribeChannels:
          - goRequest
        # ... and send them back to this channel
        defaultChannel: goResponse
        defaultEventType: "apamax.StringResponse"
        allowMissing: true
    
    - diag: { tag: application1 }
   
    # # application specific mapping
    - mapperCodec:
        "*":
          towardsTransport:
            mapFrom:
              - metadata.requestId: payload.id
              - payload: payload.data
          towardsHost:
            mapFrom:
              - payload.data: payload
              - payload.id: metadata.requestId
              - metadata.temp.channel: metadata.sag.channel
              - metadata.temp.type: metadata.sag.type

    - diag: { tag: application2 }   
  
    - goMapperCodec2
    
    - diag: { tag: transport }

    # convert everything to json as encoding format  
    - jsonCodec
    - goTransport2
