/**
 * An application to demonstrate use of the HTTPClient transport.
 *
 * Listens for Get events, then sends an HTTPRequest event to the transport
 * and listens for HTTPResponse/HTTPError events for that request to report 
 * the result.
 * 
 * $Copyright (c) 2016-2017 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 */
package apamax.httpclient;

using com.softwareag.connectivity.ConnectivityPlugins;

/** Event that the user sends in */
event Get
{
	string path;
}

/** Internal event for sending to the chain */
event HTTPRequest
{
	integer id;
	string path;
}

/** Internal response event from the chain */
event HTTPResponse
{
	integer id;
	string body;
}

/** Internal error response event from the chain */
event HTTPError
{
	integer id;
	integer code;
	string message;
}

/** 
 * Monitor which listens for Get events externally, 
 * then manages the HTTPRequest/Response/Error protocol
 * to the transport
 */
monitor HTTPGetSample
{
	action onload()
	{
		// get responses that come back from the chain
		monitor.subscribe("httpdata");

		// listen for Get requests coming in and turn them into events to send to
		// the chain
		on all Get() as g {
			doRequest(g.path);
		}
		// signal that we are ready to receive events
		ConnectivityPlugins.onApplicationInitialized();
	}
	action doRequest(string path)
	{
		// generate a unique ID for this request
		integer id := integer.getUnique();

		// listen for the response
		on HTTPResponse(id=id) as resp and not HTTPError(id=id) {
			log "Got response from "+path at INFO;
			print resp.body;
		}

		// or the error
		on HTTPError(id=id) as err and not HTTPResponse(id=id) {
			log "Error code: "+err.code.toString()+" - "+err.message at ERROR;
		}

		// send the request
		send HTTPRequest(id, path) to "getRequest";
	}
}

